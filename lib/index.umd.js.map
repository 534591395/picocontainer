{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/scoped_css.ts","../src/source.ts","../src/app.ts","../src/constants.ts","../src/app_element.ts","../src/index.ts"],"sourcesContent":["/**\n * 获取静态资源\n * @param {string} url 静态资源地址\n */\n export function fetchSource (url: string) {\n  return fetch(url).then((res) => {\n    return res.text()\n  })\n}\n","// 子应用的样式作用域处理\n\nlet templateStyle: any = null // 模版sytle\n\nexport default function scopedCSS(styleElement: HTMLStyleElement, appName: string) {\n  const prefix = `picocontainer-app[name=${appName}]`\n\n  if (!templateStyle) {\n    templateStyle = document.createElement('style')\n    document.body.appendChild(templateStyle)\n    // 设置样式表无效，防止对应用造成影响\n    templateStyle.sheet.disabled = true\n  }\n\n  if (styleElement.textContent) {\n    templateStyle.textContent = styleElement.textContent\n    styleElement.textContent = scopedRule(Array.from(templateStyle.sheet?.cssRules ?? []), prefix)\n    templateStyle.textContent = ''\n  } else {\n    // 监听动态添加内容的style元素\n    const observer = new MutationObserver(() => {\n      observer.disconnect()\n      styleElement.textContent = scopedRule(Array.from(styleElement.sheet?.cssRules ?? []), prefix)\n    })\n\n    // 监听style元素的内容是否变化\n    observer.observe(styleElement, { childList: true })\n  }\n}\n\n\n// 依次处理每个cssRule\nfunction scopedRule(rules: CSSRule[], prefix: string) {\n  let result = ''\n  // 遍历rules, 处理每一条规则\n  // https://www.w3.org/html/ig/zh/wiki/Cssom#CSS.E8.A7.84.E5.88.99\n  // 由于 CSSRule.type 被废弃，改用 rule.constructor.name 判断规则类型。https://wiki.csswg.org/spec/cssom-constants\n  for (const rule of rules) {\n    if (rule.constructor.name === 'CSSStyleRule') {\n      result += scopedStyleRule(rule as CSSStyleRule, prefix)\n    } else\n    if (rule.constructor.name === 'CSSMediaRule') {\n      result += scopedPackRule(rule as CSSMediaRule, prefix, 'media')\n    } else\n    if (rule.constructor.name === 'CSSSupportsRule') {\n      result += scopedPackRule(rule as CSSSupportsRule, prefix, 'supports')\n    } else {\n      result += rule.cssText\n    }\n  }\n\n  return result\n}\n\n\n// 处理media 和 supports\nfunction scopedPackRule (rule: CSSMediaRule | CSSSupportsRule, prefix: string, packName: string) {\n  // 递归执行scopedRule，处理media 和 supports内部规则\n  const result = scopedRule(Array.from(rule.cssRules), prefix)\n  return `@${packName} ${rule.conditionText} {${result}}`\n}\n\n\nfunction scopedStyleRule (rule: CSSStyleRule, prefix: string) {\n  // 获取CSS规则对象的选择和内容\n  const { selectorText, cssText } = rule\n\n  // 处理顶层选择器，如 body，html 都转换为 picocontainer-app[name=xxx]\n  if (/^((html[\\s>~,]+body)|(html|body|:root))$/.test(selectorText)) {\n    return cssText.replace(/^((html[\\s>~,]+body)|(html|body|:root))/, prefix)\n  } else if (selectorText === '*') {\n    // 选择器 * 替换为 picocontainer-app[name=xxx] *\n    return cssText.replace('*', `${prefix} *`)\n  }\n\n  const builtInRootSelectorRE = /(^|\\s+)((html[\\s>~]+body)|(html|body|:root))(?=[\\s>~]+|$)/\n\n  // 匹配查询选择器\n  return cssText.replace(/^[\\s\\S]+{/, (selectors) => {\n    return selectors.replace(/(^|,)([^,]+)/g, (all, $1, $2) => {\n      // 如果含有顶层选择器，需要单独处理\n      if (builtInRootSelectorRE.test($2)) {\n        // body[name=xx]|body.xx|body#xx 等都不需要转换\n        return all.replace(builtInRootSelectorRE, prefix)\n      }\n      // 在选择器前加上前缀\n      return `${$1} ${prefix} ${$2.replace(/^\\s*/, '')}`\n    })\n  })\n}\n","\nimport { fetchSource } from './utils'\nimport scopedCSS from './scoped_css'\n\nexport default function loadHtml (app: any) {\n  fetchSource(app.url).then((html) => {\n    html = html\n      .replace(/<head[^>]*>[\\s\\S]*?<\\/head>/i, (match) => {\n        // 将head标签替换为picocontainer-app-head，因为web页面只允许有一个head标签\n        return match\n          .replace(/<head/i, '<picocontainer-app-head')\n          .replace(/<\\/head>/i, '</picocontainer-app-head>')\n      })\n      .replace(/<body[^>]*>[\\s\\S]*?<\\/body>/i, (match) => {\n        // 将body标签替换为picocontainer-app-body，防止与基座应用的body标签重复导致的问题。\n        return match\n          .replace(/<body/i, '<picocontainer-app-body')\n          .replace(/<\\/body>/i, '</picocontainer-app-body>')\n      })\n\n    // 将html字符串转化为DOM结构\n    const htmlDom = document.createElement('div')\n    htmlDom.innerHTML = html\n    console.log('html:', htmlDom)\n\n    // 进一步提取和处理js、css等静态资源\n    extractSourceDom(htmlDom, app)\n\n    // picocontainer-app-head元素\n    const picocontainerAppHead = htmlDom.querySelector('picocontainer-app-head')\n    // 如果有远程css资源，则通过fetch请求\n    if (app.source.links.size) {\n      fetchLinksFromHtml(app, picocontainerAppHead, htmlDom)\n    } else {\n      app.onLoad(htmlDom)\n    }\n\n    // 如果有远程js资源，则通过fetch请求\n    if (app.source.scripts.size) {\n      fetchScriptsFromHtml(app, htmlDom)\n    } else {\n      app.onLoad(htmlDom)\n    }\n\n  }).catch((e) => {\n    console.error('加载html出错', e)\n  })\n}\n\n/**\n * 递归处理每一个子元素\n * @param parent 父元素\n * @param app 应用实例\n */\n function extractSourceDom(parent: any, app: any) {\n  const children = Array.from(parent.children)\n\n  // 递归每一个子元素\n  children.length && children.forEach((child) => {\n    extractSourceDom(child, app)\n  })\n\n  for (const dom of children) {\n    if (dom instanceof HTMLLinkElement) {\n      // 提取css地址\n      const href = dom.getAttribute('href')\n      if (dom.getAttribute('rel') === 'stylesheet' && href) {\n        // 计入source缓存中\n        app.source.links.set(href, {\n          code: '', // 代码内容\n        })\n      }\n      // 删除原有元素\n      parent.removeChild(dom)\n    } else if (dom instanceof HTMLScriptElement) {\n      // 并提取js地址\n      const src = dom.getAttribute('src')\n      if (src) { // 远程script\n        app.source.scripts.set(src, {\n          code: '', // 代码内容\n          isExternal: true, // 是否远程script\n        })\n      } else if (dom.textContent) { // 内联script\n        const nonceStr = Math.random().toString(36).substr(2, 15)\n        app.source.scripts.set(nonceStr, {\n          code: dom.textContent, // 代码内容\n          isExternal: false, // 是否远程script\n        })\n      }\n\n      parent.removeChild(dom)\n    } else if (dom instanceof HTMLStyleElement) {\n      // 进行样式隔离\n      scopedCSS(dom, app.name)\n    }\n  }\n}\n\n\n/**\n * 获取link远程资源\n * @param app 应用实例\n * @param microAppHead micro-app-head\n * @param htmlDom html DOM结构\n */\n export function fetchLinksFromHtml (app: any, microAppHead: any, htmlDom: any) {\n  const linkEntries: any = Array.from(app.source.links.entries())\n  // 通过fetch请求所有css资源\n  const fetchLinkPromise = []\n  for (const [url] of linkEntries) {\n    fetchLinkPromise.push(fetchSource(app.url+url))\n  }\n\n  Promise.all(fetchLinkPromise).then((res) => {\n    for (let i = 0; i < res.length; i++) {\n      const code = res[i]\n      // 拿到css资源后放入style元素并插入到micro-app-head中\n      const link2Style = document.createElement('style')\n      link2Style.textContent = code\n      // 样式隔离\n      scopedCSS(link2Style, app.name)\n      microAppHead.appendChild(link2Style)\n\n      // 将代码放入缓存，再次渲染时可以从缓存中获取\n      linkEntries[i][1].code = code\n    }\n\n    // 处理完成后执行onLoad方法\n    app.onLoad(htmlDom)\n  }).catch((e) => {\n    console.error('加载css出错', e)\n  })\n}\n\n/**\n * 获取js远程资源\n * @param app 应用实例\n * @param htmlDom html DOM结构\n */\n export function fetchScriptsFromHtml (app: any, htmlDom: any) {\n  const scriptEntries: any = Array.from(app.source.scripts.entries())\n  // 通过fetch请求所有js资源\n  const fetchScriptPromise = []\n  for (const [url, info] of scriptEntries) {\n    // 如果是内联script，则不需要请求资源\n    fetchScriptPromise.push(info.code ? Promise.resolve(info.code) :  fetchSource(app.url+url))\n  }\n\n  Promise.all(fetchScriptPromise).then((res) => {\n    for (let i = 0; i < res.length; i++) {\n      const code = res[i]\n      // 将代码放入缓存，再次渲染时可以从缓存中获取\n      scriptEntries[i][1].code = code\n    }\n\n    // 处理完成后执行onLoad方法\n    app.onLoad(htmlDom)\n  }).catch((e) => {\n    console.error('加载js出错', e)\n  })\n}\n","// 应用  ，SSR\nimport loadHtml from './source'\n\nexport interface CreateAppParam {\n  name: string\n  url: string\n  scopecss?: boolean\n  useSandbox?: boolean\n  macro?: boolean\n  inline?: boolean\n  baseroute?: string\n  container?: HTMLElement | ShadowRoot\n}\n\nexport default class PicocontainerApp {\n  name: string = ''\n  url: string = ''\n  container: HTMLElement | ShadowRoot | null = null\n  loadCount = 0\n\n  constructor({ name, url, container}: CreateAppParam) {\n    this.container = container ?? null\n    this.name = name\n    this.url = url\n    this.status = 'loading'\n    loadHtml(this)\n  }\n\n  status = 'created' // 组件状态，包括 created/loading/mount/unmount\n\n  // 存放应用的静态资源\n  source: any = {\n    links: new Map(), // link元素对应的静态资源\n    scripts: new Map(), // script元素对应的静态资源\n    html: ''\n  }\n\n  // 资源加载完时执行\n  onLoad (htmlDom: any) {\n    this.loadCount = this.loadCount ? this.loadCount + 1 : 1\n    // 第二次执行且组件未卸载时执行渲染\n    if (this.loadCount === 2 && this.status !== 'unmount') {\n      // 记录DOM结构用于后续操作\n      this.source.html = htmlDom\n      // 执行mount方法\n      this.mount()\n    }\n  }\n\n  /**\n   * 资源加载完成后进行渲染\n   */\n  mount () {\n    // 克隆DOM节点\n    const cloneHtml = this.source.html.cloneNode(true)\n    // 创建一个fragment节点作为模版，这样不会产生冗余的元素\n    const fragment = document.createDocumentFragment()\n    Array.from(cloneHtml.childNodes).forEach((node: any) => {\n      fragment.appendChild(node)\n    })\n\n    // 将格式化后的DOM结构插入到容器中\n    this.container?.appendChild(fragment)\n\n    // 执行js\n    this.source.scripts.forEach((info: any) => {\n      (0, eval)(info.code)\n    })\n\n    // 标记应用为已渲染\n    this.status = 'mounted'\n  }\n\n  /**\n   * 卸载应用\n   * 执行关闭沙箱，清空缓存等操作\n   */\n  unmount () {}\n}\n\n// 资源缓存\nexport const appInstanceMap = new Map()\n","export enum ObservedAttrName {\n  NAME = 'name',\n  URL = 'url',\n}\n","\nimport CreateApp, { appInstanceMap } from './app'\n\nimport { ObservedAttrName } from './constants'\n\n// 自定义元素\nclass MyElement extends HTMLElement {\n  // 声明需要监听的属性名，只有这些属性变化时才会触发attributeChangedCallback\n  static get observedAttributes() {\n    return ['name', 'url']\n  }\n\n  appName = ''\n  appUrl = ''\n\n  constructor() {\n    super()\n  }\n\n  connectedCallback() {\n    // 元素被插入到DOM时执行，此时去加载子应用的静态资源并渲染\n    console.log('picocontainer-app is connected')\n    // 创建微应用实例\n    const app = new CreateApp({\n      name: this.appName!,\n      url: this.appUrl!,\n      container: this,\n    })\n\n    // 记入缓存，用于后续功能\n    appInstanceMap.set(this.appName, app)\n  }\n\n  disconnectedCallback () {\n    // 元素从DOM中删除时执行，此时进行一些卸载操作\n    console.log('picocontainer-app has disconnected')\n\n    // 获取应用实例\n    const app = appInstanceMap.get(this.appName)\n    // 如果有属性destory，则完全卸载应用包括缓存的文件\n    app.unmount(this.hasAttribute('destory'))\n  }\n\n  attributeChangedCallback (attr: ObservedAttrName, _oldVal: string, newVal: string): void {\n    // 元素属性发生变化时执行，可以获取name、url等属性的值\n    console.log(`attribute ${attr}: ${newVal}-${_oldVal}`)\n\n    if (this[attr === ObservedAttrName.NAME ? 'appName' : 'appUrl'] !== newVal) {\n      if (attr === ObservedAttrName.URL && !this.appUrl) {\n        this.appUrl = newVal\n      } else if (attr === ObservedAttrName.NAME && !this.appName) {\n        this.appName = newVal\n      }\n    }\n  }\n\n}\n\nexport function defineElement () {\n  // 如果已经定义过，则忽略\n  if (!window.customElements.get('picocontainer-app')) {\n    /**\n     * 注册元素\n     * 注册后，就可以像普通元素一样使用picocontainer-app，当picocontainer-app元素被插入或删除DOM时即可触发相应的生命周期函数。\n     */\n    window.customElements.define(`picocontainer-app`, MyElement)\n  }\n}\n","// 参考：https://zhuanlan.zhihu.com/p/395752022\n// 入口文件\n\nimport { defineElement } from './app_element'\n\nconst SimplePicocontainerApp = {\n  start() {\n    defineElement()\n  }\n}\n\nexport default SimplePicocontainerApp\n"],"names":["fetchSource","url","fetch","then","res","text","templateStyle","scopedCSS","styleElement","appName","prefix","document","createElement","body","appendChild","sheet","disabled","textContent","scopedRule","Array","from","cssRules","observer","MutationObserver","disconnect","observe","childList","rules","result","rule","constructor","name","scopedStyleRule","scopedPackRule","cssText","packName","conditionText","selectorText","test","replace","builtInRootSelectorRE","selectors","all","$1","$2","loadHtml","app","html","match","htmlDom","innerHTML","console","log","extractSourceDom","picocontainerAppHead","querySelector","source","links","size","microAppHead","linkEntries","entries","fetchLinkPromise","push","Promise","i","length","code","link2Style","onLoad","catch","e","error","fetchLinksFromHtml","scripts","scriptEntries","fetchScriptPromise","info","resolve","fetchScriptsFromHtml","parent","children","forEach","child","dom","HTMLLinkElement","href","getAttribute","set","removeChild","HTMLScriptElement","src","isExternal","nonceStr","Math","random","toString","substr","HTMLStyleElement","PicocontainerApp","container","this","Map","status","loadCount","mount","cloneHtml","cloneNode","fragment","createDocumentFragment","childNodes","node","eval","unmount","appInstanceMap","ObservedAttrName","MyElement","HTMLElement","super","observedAttributes","connectedCallback","CreateApp","appUrl","disconnectedCallback","get","hasAttribute","attributeChangedCallback","attr","_oldVal","newVal","NAME","URL","SimplePicocontainerApp","start","window","customElements","define"],"mappings":"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"}